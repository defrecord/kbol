#+TITLE: kbol - Knowledge Base from Technical Books
#+AUTHOR: Jason Walsh
#+EMAIL: j@wal.sh
#+DATE: 2024-11-15

* Overview
A focused RAG (Retrieval Augmented Generation) system for programming books that lets you query and explore your technical library using natural language.

#+begin_src mermaid :file doc/images/rag-flow.png
flowchart LR
    PDFs[Technical Books] --> Chunker[Text Chunker]
    Chunker --> Embedder[Ollama Embedder]
    Embedder --> VectorDB[(Vector DB)]
    Query[User Query] --> Semantic[Semantic Search]
    VectorDB --> Semantic
    Semantic --> LLM[Ollama LLM]
    LLM --> Response[Response]
#+end_src

* System Architecture
** Component Overview
#+begin_src mermaid :file doc/images/structure.png
graph TD
    CLI[Command Line Interface] --> Core[Core Engine]
    Core --> Indexer[Document Indexer]
    Core --> Search[Search Engine]
    Core --> Embedder[Embedding Service]
    Core --> LLM[LLM Service]
    
    Indexer --> Chunker[Text Chunker]
    Indexer --> DocTracker[Document Tracker]
    
    Search --> DB[(Vector Database)]
    
    subgraph Processing Pipeline
        Chunker --> Embedder
        Embedder --> DB
    end
    
    subgraph Query Pipeline
        Search --> LLM
        DB --> Search
    end
#+end_src

* Usage
** Processing Books
:PROPERTIES:
:header-args:python: :results output :exports both
:END:

#+begin_src python
from kbol.indexer import BookIndexer
from pathlib import Path

indexer = BookIndexer()
books_dir = Path("data/books")
results = await indexer.process_books(books_dir)
print(f"Processed {len(results)} chunks")
#+end_src

** Example Queries
:PROPERTIES:
:header-args:bash: :tangle scripts/example_queries.sh :mkdirp yes :comments org
:END:

Below are powerful example queries that leverage the diverse technical and theoretical knowledge in the book collection:

*** Technical Architecture Queries
#+begin_src bash
# Technical Architecture Patterns
poetry run python -m kbol query "Compare event-driven, flow-based, and microservice architectural patterns"
poetry run python -m kbol query "What are the key metrics for evaluating microservices architecture success?"
poetry run python -m kbol query "How does Domain-Driven Design evolve when moving from monoliths to microservices?"
#+end_src

*** Functional Programming Deep Dives
#+begin_src bash
# Functional Programming Concepts
poetry run python -m kbol query "Explain monads using examples from Clojure and Scala"
poetry run python -m kbol query "Compare approaches to immutability and state management in Python vs Clojure"
poetry run python -m kbol query "Show patterns for combining functional and reactive programming"
#+end_src

*** Cross-Disciplinary Insights
#+begin_src bash
# Cross-Domain Knowledge Synthesis
poetry run python -m kbol query "How do behavioral science insights inform better API design?"
poetry run python -m kbol query "What principles from critical thinking apply to software architecture?"
poetry run python -m kbol query "How do concepts from systems thinking apply across microservices and macroeconomics?"
#+end_src

*** Practical Development Examples
#+begin_src bash
# Practical Implementation Patterns
poetry run python -m kbol query "Show me Clojure examples of map and reduce with real-world use cases"
poetry run python -m kbol query "What are the best practices for testing event-driven microservices?"
poetry run python -m kbol query "Compare Python and Clojure approaches to handling concurrency"
#+end_src

*** API and Integration Patterns
#+begin_src bash
# API Design and Evolution
poetry run python -m kbol query "What patterns emerge for managing API evolution in microservices?"
poetry run python -m kbol query "How do micro-frontends impact API design and management?"
poetry run python -m kbol query "Compare REST, GraphQL, and event-driven API patterns"
#+end_src

These queries demonstrate the system's ability to synthesize knowledge across:
- Software architecture and systems design
- Functional and reactive programming paradigms  
- Cross-disciplinary insights from philosophy and economics
- Practical development patterns and best practices
- Modern API and integration approaches

When executed, =C-c C-v t= will tangle these examples to =scripts/example_queries.sh=, creating a ready-to-use script of example queries.
* Implementation Details
** Vector Database Schema
#+begin_src sql :tangle src/kbol/db/schema.sql
CREATE EXTENSION IF NOT EXISTS vector;

CREATE TABLE IF NOT EXISTS book_chunks (
    id SERIAL PRIMARY KEY,
    book_title TEXT NOT NULL,
    content TEXT NOT NULL,
    embedding vector(384),
    page_number INTEGER,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX IF NOT EXISTS book_chunks_embedding_idx ON book_chunks 
USING ivfflat (embedding vector_cosine_ops);
#+end_src

** Processing Pipeline
#+begin_src mermaid :file doc/images/pipeline.png
sequenceDiagram
    participant PDF as PDF Books
    participant Chunker as Text Chunker
    participant Embedder as Ollama Embedder
    participant DB as Vector DB
    
    PDF->>Chunker: Raw Text
    Chunker->>Chunker: Split into Chunks
    loop Each Chunk
        Chunker->>Embedder: Text Chunk
        Embedder->>Embedder: Generate Embedding
        Embedder->>DB: Store Chunk + Embedding
    end
#+end_src

* Quick Start
1. Setup your environment:
   #+begin_src bash
   make setup
   #+end_src

2. Run the complete demo with a sample book:
   #+begin_src bash
   make demo
   #+end_src

3. Try some example queries:
   #+begin_src bash
   # Query about specific topics
   poetry run python -m kbol query "Explain monads from the functional programming books"

   # Find code examples
   poetry run python -m kbol query "Show me Clojure examples of map and reduce"

   # Compare concepts
   poetry run python -m kbol query "Compare Python and Clojure approaches to immutability"
   #+end_src

* Development Commands
| Command          | Description                                |
|------------------+--------------------------------------------|
| make setup       | Initial setup of development environment   |
| make demo        | Run complete demo pipeline                 |
| make load-books  | Link books from your collection           |
| make process-books| Process books into chunks with embeddings |
| make stats       | Show statistics about processed books      |
| make clean       | Clean generated files and directories     |

* Vector Database Schema
The system uses a PostgreSQL database with vector similarity search capabilities:

#+begin_src sql
CREATE TABLE book_chunks (
    id SERIAL PRIMARY KEY,
    book_title TEXT NOT NULL,
    content TEXT NOT NULL,
    embedding vector(384),
    page_number INTEGER,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
#+end_src

* License
MIT

* Author
Jason Walsh ([[https://wal.sh][https://wal.sh]])
